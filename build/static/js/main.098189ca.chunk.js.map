{"version":3,"sources":["components/Contacts.js","components/Addperson.js","components/Filter.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Contacts","persons","searchChars","deletePerson","sc","console","log","toString","toLowerCase","filter","person","name","includes","map","key","id","number","onClick","Addperson","addName","newName","newNumber","handleNumberAdd","handleNameAdd","onSubmit","value","onChange","type","Filter","handleSearch","axios","get","newObject","post","url","delete","updated","put","App","useState","setPersons","setNewName","setNewNumber","setSearchChars","message","setMessage","error","setError","useEffect","personsService","then","response","data","Notification","className","event","target","personObject","preventDefault","existing","p","length","window","confirm","setTimeout","catch","concat","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.098189ca.chunk.js","sourcesContent":["import React from 'react'\nconst Contacts = ({ persons, searchChars, deletePerson}) => {\n    let sc = ''\n    console.log(searchChars)\n    if(searchChars){\n        sc = searchChars.toString().toLowerCase()\n    }\n    return( \n     persons.filter(person => person.name.toLowerCase().includes(sc))\n            .map(person => <p key = {person.id}>{person.name} {person.number}<button onClick={() => {deletePerson(person)}}>delete</button></p>)\n    )\n}\nexport default Contacts","import React from 'react'\nconst Addperson = ({ addName, newName, newNumber, handleNumberAdd, handleNameAdd }) => {\n  return (\n    <div>\n      <form onSubmit={addName}>\n        Name:  <input value={newName}\n          onChange={handleNameAdd}\n        />\n        <br />\n        Number:  <input value={newNumber}\n          onChange={handleNumberAdd}\n        />\n        <br />\n        <button type=\"submit\">add</button>\n      </form>\n    </div>\n  )\n}\nexport default Addperson","import React from 'react'\nconst Filter = ({ handleSearch, searchChars }) => {\n  return (\n    <div>\n      <form>\n        filter shown with:  <input value={searchChars}\n          onChange={handleSearch}\n        />\n      </form>\n    </div>\n  )\n}\nexport default Filter","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  console.log(\"haetaan kaikki\")\n  return axios.get(baseUrl)\n}\nconst create = newObject => {\n  return axios.post(baseUrl, newObject)\n}\nconst del = (url) =>{\n return axios.delete(url)\n}\nconst update = (url, updated) => {\nreturn axios.put(url, updated)\n\n}\nexport default { \n  getAll: getAll,\n  create: create,\n  del: del,\n  update: update\n}","import React, { useState, useEffect } from 'react'\nimport Contacts from './components/Contacts'\nimport Addperson from './components/Addperson'\nimport Filter from './components/Filter'\nimport personsService from './services/persons'\n\nconst App = () => {\n\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [searchChars, setSearchChars] = useState('')\n  const [message, setMessage] = useState(null)\n  const [error, setError] = useState(null)\n\n  useEffect(() => {\n    personsService\n      .getAll()\n      .then(response => {\n        console.log(response.data)\n        setPersons(response.data)\n      })\n  }, [])\n\n\n  const addName = (event) => {\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n    event.preventDefault()\n    let existing = persons.filter(p => p.name === newName)\n\n    if (existing.length > 0) {\n      console.log(existing[0].id)\n      if (window.confirm(newName + \" is already added to the phonebook, replace the old number with a new one?\")) {\n        const updated = { ...existing[0], number: newNumber }\n        personsService\n          .update('/api/persons/' + existing[0].id, updated)\n          .then(response => {\n            setPersons(persons.map(person => person.id !== existing[0].id ? person : response.data))\n            \n            setMessage(existing[0].name + ' was updated')\n            setTimeout(() => {\n              setMessage(null)\n            }, 3000)\n            setNewName('')\n            setNewNumber('')\n          })\n          .catch(error => {\n            setPersons(persons.filter(p => p.id !== existing[0].id))\n            setError(\n              existing[0].name + ' was already deleted'\n            )\n            setTimeout(() => {\n              setError(null)\n            }, 3000)\n          })\n      }\n    }\n    else {\n      personsService\n        .create(personObject)\n        .then(response => {\n          setPersons(persons.concat(response.data))\n          setNewName('')\n          setNewNumber('')\n          setMessage(personObject.name + ' was added')\n          setTimeout(() => {\n            setMessage(null)\n          }, 2000)\n        })\n        .catch(error => {\n          console.log(error.response.data.error)\n          setMessage(error.response.data.error)\n          setTimeout(() => {\n            setMessage(null)\n          }, 6000)\n        })\n    }\n  }\n  const deletePerson = (person) => {\n    const url = '/api/persons/' + person.id + '?'\n    if (window.confirm(\"Delete \" + person.name)) {\n      personsService\n        .del(url)\n        .then(response => {\n          setPersons(persons.filter(p => p.id !== person.id))\n          setMessage(person.name + ' was deleted')\n          setTimeout(() => {\n            setMessage(null)\n          }, 2000)\n        })\n        \n    }\n  }\n\n  const handleNameAdd = (event) => {\n    setNewName(event.target.value)\n\n  }\n  const handleNumberAdd = (event) => {\n    setNewNumber(event.target.value)\n  }\n  const handleSearch = (event) => {\n    setSearchChars(event.target.value)\n  }\n\n  const Notification = ({ message, className }) => {\n    if (message === null) {\n      return null\n    }\n\n    return (\n      <div className={className}>\n        {message}\n      </div>\n    )\n  }\n\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} className=\"msg\" />\n      <Notification message={error} className=\"error\" />\n      <Filter searchChars={searchChars} handleSearch={handleSearch} />\n\n      <h2>add a new</h2>\n      <Addperson addName={addName} newName={newName} newNumber={newNumber} handleNameAdd={handleNameAdd} handleNumberAdd={handleNumberAdd} />\n\n      <h2>Numbers</h2>\n      <Contacts searchChars={searchChars} persons={persons} deletePerson={deletePerson} />\n\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}